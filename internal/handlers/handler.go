package handler

import (
	"log/slog"
	"os"
	"path/filepath"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	greetingText = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª:`
	ntoFilePath = "/Users/stipochka/course_tg_bot/files/sales/SHABLON.doc"
	meroChoice  = "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
	saleChoice  = "–í—ã –≤—ã–±—Ä–∞–ª–∏: –¢–æ—Ä–≥–æ–≤–ª—è/—É—Å–ª—É–≥–∏"
	attrChoice  = "–í—ã –≤—ã–±—Ä–∞–ª–∏: –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
	salesPhotos = "/Users/stipochka/course_tg_bot/files/sales/photo/"
	attrPhotos  = "/Users/stipochka/course_tg_bot/files/attr/photo/"
	docMessage  = `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –∏ —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É info@parkinnov.ru. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—á–∞—Ç—å, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–µ—á–∞—Ç—å—é. –ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.`
)

var log = slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelError}))

func getAllGPGImages(dir string) ([]string, error) {
	var photos []string

	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() && filepath.Ext(path) == ".jpg" {
			photos = append(photos, path)
		}

		return nil
	})

	return photos, err
}

func deleteBotMessage(bot *tgbotapi.BotAPI, chatID int64, messageID int) error {
	deleteConfig := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, err := bot.Request(deleteConfig)
	return err
}

func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	lgr := log.With(slog.String("user", message.Chat.UserName))
	switch message.Text {
	case "/start":
		lgr.Info("received /start command")
		menu := tgbotapi.NewMessage(message.Chat.ID, greetingText)
		menu.ReplyMarkup = MainMenu()
		bot.Send(menu)
		lgr.Info("sended menu to user")
	case "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
		lgr.Info("called events menu")
		text := tgbotapi.NewMessage(message.Chat.ID, meroChoice)
		bot.Send(text)
		sendInlineMenu(bot, message.Chat.ID, eventsMenu())
		lgr.Info("sended menu to user")
	case "üì¶ –¢–æ—Ä–≥–æ–≤–ª—è/—É—Å–ª—É–≥–∏":
		lgr.Info("called trade/services menu")
		text := tgbotapi.NewMessage(message.Chat.ID, saleChoice)
		bot.Send(text)
		sendInlineMenu(bot, message.Chat.ID, servicesMenu())
		lgr.Info("sended trade/services menu")
	case "üé° –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è":
		lgr.Info("called attraction menu")
		text := tgbotapi.NewMessage(message.Chat.ID, attrChoice)
		bot.Send(text)
		sendInlineMenu(bot, message.Chat.ID, attractionsMenu())
		lgr.Info("sended attraction menu")
	}
}

func sendPhotoAlbum(bot *tgbotapi.BotAPI, chatID int64, imagePaths []string) error {
	var media []interface{}

	for _, path := range imagePaths {
		photo := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(path))
		media = append(media, photo)
	}

	group := tgbotapi.NewMediaGroup(chatID, media)
	_, err := bot.SendMediaGroup(group)
	return err
}

func HandleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery) {
	switch query.Data {
	case "price_list":
		imagePaths, err := getAllGPGImages(salesPhotos)
		if err != nil {
			msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
			bot.Send(msg)
			log.Error("failed to get images", slog.Any("error", err))
			return
		}
		err = sendPhotoAlbum(bot, query.Message.Chat.ID, imagePaths)
		if err != nil {
			log.Error("failed to send price list album", slog.Any("error", err.Error()))
			msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
			bot.Send(msg)
			return
		}
		log.Info("sended price list to user")
	case "application_form":
		if _, err := os.Stat(ntoFilePath); err == nil {
			msg := tgbotapi.NewMessage(query.Message.Chat.ID, docMessage)
			doc := tgbotapi.NewDocument(query.Message.Chat.ID, tgbotapi.FilePath(ntoFilePath))
			bot.Send(doc)
			bot.Send(msg)
			log.Info("sended application from to user")
			return
		}
		log.Error("failed to send application form to user")

	case "attr_list":
		imagePaths, err := getAllGPGImages(attrPhotos)
		if err != nil {
			log.Error("failed to get images", slog.Any("error", err))
			msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
			bot.Send(msg)
			return
		}
		err = sendPhotoAlbum(bot, query.Message.Chat.ID, imagePaths)
		if err != nil {
			log.Error("failed to send album to user", slog.Any("error", err))
			msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
			bot.Send(msg)
			return
		}
		log.Info("sended attraction album to user")
	case "back":
		deleteBotMessage(bot, query.Message.Chat.ID, query.Message.MessageID)
		menu := tgbotapi.NewMessage(query.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
		menu.ReplyMarkup = MainMenu()
		bot.Send(menu)
	}
}

func MainMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		[]tgbotapi.KeyboardButton{{Text: "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"}},
		[]tgbotapi.KeyboardButton{{Text: "üì¶ –¢–æ—Ä–≥–æ–≤–ª—è/—É—Å–ª—É–≥–∏"}},
		[]tgbotapi.KeyboardButton{{Text: "üé° –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"}},
	)
}

func eventsMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonURL("üìÜ –ü–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", "https://disk.yandex.ru/i/UwUr6rxRKLJfGw"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonURL("üì∏ –§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã", "https://vk.com/albums-190907367"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		},
	)
}

func servicesMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", "price_list"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üìÑ –ó–∞—è–≤–∫–∞ (–ù–¢–û)", "application_form"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		},
	)
}

func attractionsMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", "attr_list"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		},
	)
}

func sendInlineMenu(bot *tgbotapi.BotAPI, chatID int64, menu tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ReplyMarkup = menu
	bot.Send(msg)
}
